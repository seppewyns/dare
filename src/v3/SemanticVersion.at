
// Represents a semantic version.
// https://semver.org
isolate: {
    def major;
    def minor;
    def patch;

    // Initializes the object, given the major, minor, and patch version numbers
    def init(major, minor, patch) {
        self.major := major;
        self.minor := minor;
        self.patch := patch;
    };

    // Compares the version to another version.
    // Returns -1 if this version is smaller than the given version, 0 if
    // they are equal, and 1 if this version is greater than the given version.
    def compare(other) {
        { |return|
          if: self.major < other.major then: { return(-1) };
          if: self.major > other.major then: { return(1) };
          if: self.minor < other.minor then: { return(-1) };
          if: self.minor > other.minor then: { return(1) };
          if: self.patch < other.patch then: { return(-1) };
          if: self.patch > other.patch then: { return(1) };

          return(0)
        }.escape()
    };

    // Returns true if this version is newer than the given version, false otherwise.
    def isNewer(other) { self.compare(other) == 1 };
    // Returns true if this version is older than the given version, false otherwise.
    def isOlder(other) { self.compare(other) == -1 };
    // Returns true if this version is equal to the given version, false otherwise.
    def isEqual(other) { self.compare(other) == 0 };

    // Converts the version to a string representation.
    def toString() { self.major.toText() + "." + self.minor.toText() + "." + self.patch.toText() }
}
